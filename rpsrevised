#!/usr/bin/env python3

"""This program plays a game of Rock, Paper, Scissors between two Players,
and reports both Player's scores each round."""
#Please note: I consulted recommended sources from the Udacity Mentor in
#this question that I posted:https://knowledge.udacity.com/questions/874836.
#I tried to modify any knowledge gained from those sources to make it my own.
#I also utilized the starter code provided by Udacity.

import random
import time
import string

moves = ['rock', 'paper', 'scissors']


def print_pause(message, delay=1):
    typewriter(message)
    time.sleep(delay)

#Typewriter code originally posted in my first python project (the Adventure Game).
#It was originally recommended by a Udacity Reviewer on that project. I have
#modified it to make it more my own.
def typewriter(message):
    for char in message:
        print(char, end='')
        if char in string.punctuation:
            time.sleep(.5)
        time.sleep(.03)
    print('')


def valid_input(prompt, choices):
    while True:
        choice = input(prompt).lower()
        if choice in choices:
            return choice
        print(f'The option "{choice}" is wonky. Try again!')


class Player:
    score = 0
    my_move = None
    their_move = None

    def learn(self, my_move, their_move):
        pass


class RockOnlyPlayer(Player):
    def move(self):
        return 'rock'


class RandomPlayer(Player):
    def move(self):
        return random.choice(moves)


class HumanPlayer(Player):
    def move(self):
        return valid_input("Choose rock, paper, or scissors:\n", moves)


class ReflectPlayer(Player):
    def move(self):
        return random.choice(moves)

    def learn(self, my_move, their_move):
        self.my_move = their_move


#I reviewed the following source for help with this part of the project:
#https://knowledge.udacity.com/questions/836517#836525. I did this because it
#was suggested by a Udacity mentor. I also read the following article online:
#https://realpython.com/python-modulo-operator/#how-to-run-code-at-specific-intervals-in-a-loop
#In the interest of avoiding plagiarism, here is my explanation of how it works.
#The first if statement helps the CyclePlayer to make a random move on the first play.
#The following line uses the index to cycle through the items in the moves list. It
#begins with rock at position 0, and ends with scissors in position 2. Eventually 3%3
#resets the index to 0. The next if statement uses the modulo to go through the
#length of the moves list (each item), and the return makes the actual move.
class CyclePlayer(Player):
    def move(self):
        if self.my_move is None:
            return random.choice(moves)
        index = moves.index(self.my_move) + 1
        if index % len(moves) == 0:
            index = 0
        return moves[index]

    def learn(self, my_move, their_move):
        self.my_move = my_move


def beats(self, one, two):
        return ((one == 'rock' and two == 'scissors') or
                (one == 'scissors' and two == 'paper') or
                (one == 'paper' and two == 'rock'))


class Game:
    p1_score = 0
    p2_score = 0

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2

    def play_round(self):
        move1 = self.p1.move()
        move2 = self.p2.move()

        print(f"Player 1: {move1} Player 2: {move2}")

        self.p1.learn(move1, move2)
        self.p2.learn(move2, move1)

        if move1 == move2:
            print_pause("Tie Game!")
        elif beats(self, move1, move2):
            self.p1.score += 1
            print("Player 1 wins!")
        else:
            self.p2.score += 1
            print("Player 2 wins!")

        print_pause("Scores: ")
        print_pause(f"Player 1: {self.p1.score}")
        print_pause(f"Player 2: {self.p2.score}")

    def play_game(self):
        print_pause("Game start!")
        for round in range(1, 4):
            print_pause(f"Round {round}:")
            self.play_round()
        if self.p1.score > self.p2.score:
            print_pause("The winner is Player 1!")
        elif self.p1.score < self.p2.score:
            print_pause("The winner is Player 2!")
        else:
            print_pause("Tie Game!")

        print_pause("Game over!")


if __name__ == '__main__':
    challengers = [RockOnlyPlayer(), RandomPlayer(), 
                   CyclePlayer(), ReflectPlayer()]

    p1 = HumanPlayer()
    p2 = random.choice(challengers)
    game = Game(p1, p2)
    game.play_game()
